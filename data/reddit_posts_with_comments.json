{ "posts": [
  { "_id": "2", "title": "Is this the right way of doing it?", "content": "Hello everyone,\n\nI’m currently working on a side project using React. On the homepage, users can see a list of posts, and clicking on any of them takes them to a different view or page (I’m using react-router-dom for this). The posts are loaded on demand, meaning more posts are fetched only when the user clicks the “Load More” button.\n\nI want to persist the scroll position and the number of loaded posts, even when the user navigates away from the homepage and then returns. My current approach is to use session storage to save the current scroll position and the number of times the “Load More” button was clicked. When the user returns to the homepage, I retrieve this information from session storage to restore the state.\n\nMy question is: Is this the right way to handle this scenario, or is there a better approach?\n\nThanks in advance for any suggestions or insights!\n\nEdit: I only store the scroll position every half-second, not continuously.", "author": "t2_155eglkv8r", "nickname": "user", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2023-10-01T00:00:00Z" }, { "_id": "1f6dcor", "title": "Everything YOU need to KNOW about Remix loaders", "content": "", "author": "stackokayflow", "nickname": "user", "comments": [], "likes": 0, "dislikes": 0, "createdAt": "2023-10-01T00:00:00Z" }, { "_id": "1f6co9z", "title": "Is this the right way of doing it?", "content": "Hello everyone,\n\nI’m currently working on a side project using React. On the homepage, users can see a list of posts, and clicking on any of them takes them to a different view or page (I’m using react-router-dom for this). The posts are loaded on demand, meaning more posts are fetched only when the user clicks the “Load More” button.\n\nI want to persist the scroll position and the number of loaded posts, even when the user navigates away from the homepage and then returns. My current approach is to use session storage to save the current scroll position and the number of times the “Load More” button was clicked. When the user returns to the homepage, I retrieve this information from session storage to restore the state.\n\nMy question is: Is this the right way to handle this scenario, or is there a better approach?\n\nThanks in advance for any suggestions or insights!\n\nEdit: I only store the scroll position every half-second, not continuously.", "author": "lastborn69", "nickname": "user", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2023-10-01T00:00:00Z" }, { "_id": "1f6ceak", "title": "I can't figure out why my component repeats an API call 4 times" }, { "_id": "1f6akwq", "title": "Rspack/rebuild for production?", "content": "Hey peeps\n\nHas anyone tried out building a react app with Rspack or rebuild cli? How was the experience with it compared to vite?\n\nIs it worth to switch from vite to Rspack for more performance? Or wait to eventually use Rolldown\n\n ", "author": "Old-Place87", "nickname": "Old-Place87", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2024-02-01T12:23:37.000Z" }, { "_id": "1f6ahp1", "title": "Looking for Feedback: JSON Schema-Driven Dynamic Form Builder for React.js", "content": "Hey fellow React developers! \n\nI'm working on a new open-source package aimed at simplifying form creation in React by leveraging **JSON schema**. The idea is to allow developers to generate entire forms dynamically based on a given JSON schema, saving tons of time and reducing boilerplate code.\n\n[...content truncated for brevity...]", "author": "Stunning_Fig9981", "nickname": "Stunning_Fig9981", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2024-02-01T12:17:06.000Z" }, { "_id": "1f6abzy", "title": "Performance Optimization Strategies for Large-Scale React Applications", "content": "**In your experience, what are the key considerations for optimizing performance in a React application, particularly when dealing with large lists or complex component trees?**\n\nI'm curious about the strategies you've implemented, such as virtualization, memoization, or code-splitting, and how they have impacted your projects.", "author": "Big_Sheepherder7862", "nickname": "Big_Sheepherder7862", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2024-02-01T12:04:47.000Z" }, { "_id": "1f69zbj", "title": "Comprehensive React Testing: Handling API Calls with Mock Service Worker", "content": "", "author": "thickoat", "nickname": "thickoat", "comments": [], "likes": 3, "dislikes": 0, "createdAt": "2024-02-01T10:39:29.000Z" }, { "_id": "1f6923e", "title": "How to treat other resources when taking The Odin Project ?", "content": "Sup guys, I'm currently going thru the odin project after failing to really develop that programmer's brain via udemy courses, it's my first time actually reading stuff & not merely skimming through, The Odin Project, on average, links us to external resources 2-5 times per lesson, this includes assignments & additional resources,\n\nI was wondering wether I need to go out of my way & look up these resources e.g. W3schools, javascript info, mdn etc in more depth & read the articles that are not mentioned in the odin project, or what they provide is enough ?", "author": "StuffIllustrious9101", "nickname": "StuffIllustrious9101", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2024-02-01T09:57:58.000Z" },{ "_id": "1f680f7", "title": " The \"Wrong Way\" To Use React ", "content": "", "author": "Sudden_Profit_2840", "nickname": "Sudden_Profit_2840", "comments": [], "likes": 0, "dislikes": 0, "createdAt": "2024-02-01T09:31:19.000Z" }, { "_id": "1f67y1x", "title": "I created an interactive 3D tag using RTF and Next.js, inspired by the Vercel Ship 2024 website.", "content": "", "author": "Epic Programmer", "nickname": "Epic Programmer", "comments": [], "likes": 1, "dislikes": 0, "createdAt": "2024-02-01T09:29:39.000Z" }, { "_id": "1f5z28f", "title": "Rate my first project with React", "content": "As the title says it's my first project with react, I would appreciate a code review I have been learning React and JS from scratch for 3 months.\n\nhttps://sushiclicker.netlify.app\n\nhttps://github.com/eziz9090/A-clicker-game", "author": "Pale_Finance3340", "nickname": "Pale_Finance3340", "comments": [], "likes": 23, "dislikes": 0, "createdAt": "2024-02-01T01:15:53.000Z" }, { "_id": "1f5n14r", "title": "Can a Pure React App Be 100% SEO Friendly?", "content": "I'm working on a React project and have been diving deep into optimizing it for SEO. I know React is traditionally seen as a client-side rendering (CSR) framework, which can create challenges for SEO since search engines often struggle to index dynamically loaded content.\n\nI've come across some solutions like:\n\n* **Server-Side Rendering (SSR)** with frameworks like Next.js\n* **Static Site Generation (SSG)**\n* **Pre-rendering** using tools like React Snap\n* **Using meta tags and structured data**\n\nBut I'm curious: **Is it possible to make a pure React app (without SSR or SSG) 100% SEO-friendly?**", "author": "t2_t8eddrgw", "nickname": "t2_t8eddrgw", "comments": [], "likes": 0, "dislikes": 0, "createdAt": "2024-02-01T01:56:14.000Z" }, { "_id": "1f5l7em", "title": "Did you know you can return JSX markup from React server actions?", "content": "", "author": "vitalets", "nickname": "vitalets", "comments": [], "likes": 0, "dislikes": 0, "createdAt": "2024-02-01T00:21:54.000Z" }, { "_id": "1f5ky6k", "title": "Why does shadcn alter the body tag when using dialog or select elements and how do I stop it", "content": "(SOLVED) =>. turns out its a shadcn problem with a simple fix shown in this vid https://www.youtube.com/watch?v=B8EgmMkI8n0\n\nbefore opening body tag\n\n <body style>\n\nAfter opening dialog or select\n\n <body data-scroll-locked=\"1\" style=\"pointer-events: none;\">\n\nBecuase shadcn does this I cant scroll inside a select with large list of options by scrolling and it blocks all onclick events", "author": "Mohammed_poolwala", "nickname": "Mohammed_poolwala", "comments": [], "likes": 0, "dislikes": 0, "createdAt": "2024-02-01T00:05:31.000Z" }, { "_id": "1f5khi4", "title": "Building Dynamic and SEO-Friendly Apps with SSR in Next.js", "content": "", "author": "Mohammed_poolwala", "nickname": "Mohammed_poolwala", "comments": [], "likes": 0, "dislikes": 0, "createdAt": "2024-01-31T23:35:19.000Z" }]}